generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Lookup {
  id       Int         @id @default(autoincrement())
  category String
  value    String
  gender   CareTaker[] @relation("genderRelation")
  type     CareTaker[] @relation("typeRelation")
  Children Children[]
}

model Admin {
  id         Int          @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String       @unique
  password   String
  status     Boolean      @default(true)
  image      String
  Enviroment Enviroment[]
}

model CareTaker {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  typeId    Int
  genderId  Int
  image     String
  status    Boolean    @default(true)
  gender    Lookup     @relation("genderRelation", fields: [genderId], references: [id])
  type      Lookup     @relation("typeRelation", fields: [typeId], references: [id], onUpdate: NoAction)
  Children  Children[]
  Feedback  FeedBack[]
}

model Children {
  id              Int               @id @default(autoincrement())
  dateOfBirth     DateTime
  firstName       String
  lastName        String
  description     String
  parentId        Int
  image           String
  genderId        Int
  status          Boolean           @default(true)
  childEnviroment ChildEnviroment[]
  ChildHobby      ChildHobby[]
  gender          Lookup            @relation(fields: [genderId], references: [id], onUpdate: NoAction)
  parent          CareTaker         @relation(fields: [parentId], references: [id])
  ChildTraits     ChildTraits[]
}

model Traits {
  id               Int                @id @default(autoincrement())
  name             String
  status           Boolean            @default(true)
  ChildTraits      ChildTraits[]
  EnviromentTraits EnviromentTraits[]
  TraitsAcquire    TraitsAcquire[]
}

model Enviroment {
  id               Int                @id @default(autoincrement())
  name             String
  startAge         Int
  endAge           Int
  enviromentPath   String
  status           Boolean            @default(true)
  addedById        Int
  image            String
  ChildEnviroment  ChildEnviroment[]
  addedBy          Admin              @relation(fields: [addedById], references: [id])
  EnviromentTraits EnviromentTraits[]
  Feedback         FeedBack[]
}

model Hobbies {
  id         Int          @id @default(autoincrement())
  name       String
  status     Boolean      @default(true)
  ChildHobby ChildHobby[]
}

model ChildEnviroment {
  id                      Int                       @id @default(autoincrement())
  childId                 Int
  enviromentId            Int
  children                Children                  @relation(fields: [childId], references: [id])
  enviroment              Enviroment                @relation(fields: [enviromentId], references: [id])
  ChildEnviromentActivity ChildEnviromentActivity[]
}

model ChildEnviromentActivity {
  id                Int             @id @default(autoincrement())
  activityTimeStart DateTime
  activityTimeEnd   DateTime
  childEnviromentId Int
  enviroment        ChildEnviroment @relation(fields: [childEnviromentId], references: [id])
  TraitsAcquire     TraitsAcquire[]
}

model ChildHobby {
  id      Int      @id @default(autoincrement())
  childId Int
  hobbyId Int
  child   Children @relation(fields: [childId], references: [id])
  hobby   Hobbies  @relation(fields: [hobbyId], references: [id])
}

model EnviromentTraits {
  id           Int        @id @default(autoincrement())
  enviromentId Int
  traitId      Int
  enviroment   Enviroment @relation(fields: [enviromentId], references: [id])
  trait        Traits     @relation(fields: [traitId], references: [id])
}

model TraitsAcquire {
  id                      Int                     @id @default(autoincrement())
  childEnvActivityId      Int
  traitId                 Int
  value                   Float
  childEnviromentActivity ChildEnviromentActivity @relation(fields: [childEnvActivityId], references: [id])
  trait                   Traits                  @relation(fields: [traitId], references: [id])
}

model ChildTraits {
  id      Int      @id @default(autoincrement())
  childId Int
  traitId Int
  child   Children @relation(fields: [childId], references: [id])
  trait   Traits   @relation(fields: [traitId], references: [id])
}

model FeedBack {
  id           Int        @id @default(autoincrement())
  careTakerId  Int
  enviromentId Int
  rating       Float
  comments     String
  time         DateTime
  careTaker    CareTaker  @relation(fields: [careTakerId], references: [id])
  enviroment   Enviroment @relation(fields: [enviromentId], references: [id])
}
