generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  PRISMA_CLI_QUERY_ENGINE_TYPE="binary"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Lookup {
  id       Int          @id @default(autoincrement())
  category String
  value    String
  gender   CareTakers[] @relation("genderRelation")
  type     CareTakers[] @relation("typeRelation")
  Children Children[]
}

model Admin {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  status      Boolean       @default(true)
  image       String
  Enviroments Enviroments[]
}

model CareTakers {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  typeId    Int
  genderId  Int
  image     String
  status    Boolean    @default(true)
  gender    Lookup     @relation("genderRelation", fields: [genderId], references: [id])
  type      Lookup     @relation("typeRelation", fields: [typeId], references: [id], onUpdate: NoAction)
  Children  Children[]
  Feedback  Feedback[]
}

model Children {
  id               Int                @id @default(autoincrement())
  dateOfBirth      DateTime
  firstName        String
  lastName         String
  description      String
  parentId         Int
  image            String
  genderId         Int
  status           Boolean            @default(true)
  ChildEnviroments ChildEnviroments[]
  ChildHobbies     ChildHobbies[]
  gender           Lookup             @relation(fields: [genderId], references: [id], onUpdate: NoAction)
  parent           CareTakers         @relation(fields: [parentId], references: [id])
  ChildTraits      ChildTraits[]
}

model Traits {
  id               Int                @id @default(autoincrement())
  name             String
  status           Boolean            @default(true)
  ChildTraits      ChildTraits[]
  EnviromentTraits EnviromentTraits[]
  TraitsAcquire    TraitsAcquire[]
}

model Enviroments {
  id               Int                @id @default(autoincrement())
  name             String
  startAge         Int
  endAge           Int
  enviromentPath   String
  status           Boolean            @default(true)
  addedById        Int
  image            String
  ChildEnviroments ChildEnviroments[]
  addedBy          Admin              @relation(fields: [addedById], references: [id])
  EnviromentTraits EnviromentTraits[]
  Feedback         Feedback[]
}

model Hobbies {
  id           Int            @id @default(autoincrement())
  name         String
  status       Boolean        @default(true)
  ChildHobbies ChildHobbies[]
}

model ChildEnviroments {
  id                       Int                        @id @default(autoincrement())
  childId                  Int
  enviromentId             Int
  children                 Children                   @relation(fields: [childId], references: [id])
  enviroment               Enviroments                @relation(fields: [enviromentId], references: [id])
  ChildEnviromentsActivity ChildEnviromentsActivity[]
}

model ChildEnviromentsActivity {
  id                 Int              @id @default(autoincrement())
  activityTimeStart  DateTime
  activityTimeEnd    DateTime
  ChildEnviromentsId Int
  enviroment         ChildEnviroments @relation(fields: [ChildEnviromentsId], references: [id])
  TraitsAcquire      TraitsAcquire[]
}

model ChildHobbies {
  id      Int      @id @default(autoincrement())
  childId Int
  hobbyId Int
  child   Children @relation(fields: [childId], references: [id])
  hobby   Hobbies  @relation(fields: [hobbyId], references: [id])
}

model EnviromentTraits {
  id           Int         @id @default(autoincrement())
  enviromentId Int
  traitId      Int
  enviroment   Enviroments @relation(fields: [enviromentId], references: [id])
  trait        Traits      @relation(fields: [traitId], references: [id])
}

model TraitsAcquire {
  id                       Int                      @id @default(autoincrement())
  childEnvActivityId       Int
  traitId                  Int
  value                    Float
  ChildEnviromentsActivity ChildEnviromentsActivity @relation(fields: [childEnvActivityId], references: [id])
  trait                    Traits                   @relation(fields: [traitId], references: [id])
}

model ChildTraits {
  id      Int      @id @default(autoincrement())
  childId Int
  traitId Int
  child   Children @relation(fields: [childId], references: [id])
  trait   Traits   @relation(fields: [traitId], references: [id])
}

model Feedback {
  id           Int         @id @default(autoincrement())
  careTakerId  Int
  enviromentId Int
  rating       Float
  comments     String
  time         DateTime
  careTaker    CareTakers  @relation(fields: [careTakerId], references: [id])
  enviroment   Enviroments @relation(fields: [enviromentId], references: [id])
}
